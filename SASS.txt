What is SASS / SCSS ?
Syntactically Awesome Style Sheets. Extends CSS (during development) compiled to CSS (before Production).

1. Nesting
Rather than repeating the same selectors over and over again, you can write one style rules inside another. Sass will automatically combine the outer rule’s
selector with the inner rule’s.
2. Variables
You assign a value to a name that begins with $, and then you can refer to that name instead of the value itself. A variable declaration looks a lot like a
property declaration: it’s written $<variable>: <expression>. Unlike a property, which can only be declared in a style rule, variables can be declared anywhere
you want. We can store a series of values of a property (called list) in a variable as well. Lastly we can also store a map in a variable. A map is created
using below syntax:

$variable-name: (
key: value,
key2: value
....
);

To access a value from the map use the map-get function i.e., map-get($variable-name, key)

3. Inbuild functions
SCSS has many inbuild functions. See here: https://sass-lang.com/documentation/modules

4. Simple Arithmetic:
We can use simple match operators like +, -, *, /

5.Partials:
You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularize your CSS and
help keep things easier to maintain. A partial is a Sass file named with a leading underscore. The underscore lets Sass know that the file is only a partial
file and that it should not be generated into a CSS file.

6. Advanced @media
For a particular selector in the media query, the media query can be nested in the rule without the media query for that selector.

7. Inheritance
There are often cases when designing a page when one class should have all the styles of another class, as well as its own specific styles. For example, the
BEM methodology encourages modifier classes that go on the same elements as block or element classes. But this can create cluttered HTML, it's prone to errors
from forgetting to include both classes, and it can bring non-semantic style concerns into your markup.
Sass’s @extend rule solves this. It’s written @extend <selector>, and it tells Sass that one selector should inherit the styles of another.

8. Mixins, @include and @content
Mixins allow you to define styles that can be re-used throughout your stylesheet. Mixins are defined using the @mixin at-rule, which is written
@mixin <name>() { ... } or @mixin name(<arguments...>) { ... }.
Mixins are included into the current context using the @include at-rule, which is written @include <name>() or @include <name>(<arguments...>).
In addition to taking arguments, a mixin can take an entire block of styles, known as a content block. A mixin can declare that it takes a content block by
including the @content at-rule in its body. The content block is passed in using curly braces like any other block in Sass, when including the mixin, and it’s
injected in place of the @content rule.

9. Parent Selector:
The parent selector, &, is a special selector used in nested selectors to refer to the outer selector. It makes it possible to re-use the outer selector in
more complex ways, like adding a pseudo-class or adding a selector before the parent.